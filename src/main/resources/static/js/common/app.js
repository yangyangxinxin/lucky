"use strict";
var $app = {};
$app.checkCookieEnable = function () {
    return !!navigator.cookieEnabled || (alert("开启Cookie之后才能登录"), !1)
}, $app.getRequest = function () {
    var e = [{}, window.location.search], t = e[0], a = e[1];
    if (null != a && "" != a) {
        a = a.substr(1);
        for (var n = a.split("&"), l = 0; l < n.length; l++) {
            var i = n[l].split("=");
            t[i[0]] = i[1]
        }
    }
    return t
}, $app.escapeHtml = function (e) {
    return void 0 == e || null == e ? "" : "string" != typeof e ? e : "" == e.trim() ? "" : (e = e.replace(/ /g, "&nbsp;"), e = e.replace(/</g, "&lt;"), e = e.replace(/>/g, "&gt;"), e = e.replace(/\\&/g, "&amp;"), e = e.replace(/'/g, "&quot;"))
}, $.toast = function (e, t, a) {
    var n = document.createElement("div");
    a = "function" == typeof t ? t : a, t = void 0 == t ? 2e3 : "function" == typeof t ? 2e3 : t, n.classList.add("toast-container"), n.innerHTML = '<div class="toast-message">' + e + "</div>", document.body.appendChild(n), setTimeout(function () {
        document.body.removeChild(n), a && a()
    }, t || 2e3)
}, $app.escapeTitle = function (e) {
    return e = $app.escapeHtml(e), "string" == typeof e && "" != e ? e.replace(/"/g, "&quot;") : e
}, function () {
    var e = {isShadeClose: !0, boxTitle: !1, shade: [.3, "#000"], closeBtn: 0, cancel: null, end: null},
        t = {tabClass: "tab-default", tabItems: [], afterLoad: null};
    $.fn.extend({
        tabControl: function (e) {
            for (var a = $.extend({}, t, e), n = a.tabItems, l = null, i = $("<ul>"), o = 0; o < n.length; o++) {
                var s = $("<li>");
                s.text(n[o][0]), s.data("index", o), s.data("target", n[o][1]), s.click(function () {
                    if (!$(this).is(".active")) {
                        for (var e = 0; e < n.length; e++)$(n[e][1]).hide();
                        $(this).data("elem");
                        $(this).parent().find("li").removeClass("active"), $(this).addClass("active");
                        var t = parseInt($(this).data("index"));
                        $(n[t][1]).show(), $(this).trigger("tabControlResolve", $(this).data("target"))
                    }
                }), i.append(s), a.defItem == n[o][1] && (l = o)
            }
            $(this).addClass(a.tabClass), $(this).append(i), l = null == l ? 0 : l, i.find("li").eq(l).click()
        }, boxSmall: function (t) {
            var a = $.extend({}, e, t), n = layer.open({
                type: 1,
                title: a.boxTitle,
                closeBtn: a.closeBtn,
                area: a.area || "300px",
                shadeClose: a.isShadeClose,
                content: $(this),
                shade: a.shade,
                end: a.end || null,
                cancel: a.cancel || null
            });
            return n
        }, boxLarge: function (t) {
            var a = $.extend({}, e, t), n = layer.open({
                type: 1,
                title: a.boxTitle,
                closeBtn: a.closeBtn,
                area: a.area || "560px",
                shadeClose: a.isShadeClose,
                content: $(this),
                shade: a.shade,
                end: a.end || null,
                cancel: a.cancel || null
            });
            return n
        }
    })
}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
